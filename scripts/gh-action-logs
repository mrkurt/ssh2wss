#!/usr/bin/env -S deno run --allow-run --allow-net=api.github.com --allow-write=tmp

const STATUS_EMOJI = {
  queued: "‚è≥",
  in_progress: "üîÑ",
  completed: "‚úÖ",
  failure: "‚ùå",
  cancelled: "‚ö´",
  skipped: "‚è≠Ô∏è",
  success: "‚úÖ",
  waiting: "‚åõ",
};

interface Run {
  databaseId: number;
  status: string;
  conclusion: string | null;
  headBranch: string;
  name: string;
  createdAt: string;
}

interface Job {
  id: number;
  status: string;
  conclusion: string | null;
  name: string;
}

function formatElapsedTime(ms: number): string {
  const seconds = Math.floor(ms / 1000);
  if (seconds < 60) {
    return `${seconds}s`;
  }
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}m${remainingSeconds}s`;
}

async function getRuns(watch = false): Promise<Run[]> {
  const process = new Deno.Command("gh", {
    args: [
      "run", 
      "list", 
      "-L", "10", 
      "--json", 
      "databaseId,status,conclusion,headBranch,name,createdAt"
    ],
  });
  const { stdout } = await process.output();
  let runs = JSON.parse(new TextDecoder().decode(stdout));
  
  if (watch) {
    // When watching, only show runs from last hour
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    runs = runs.filter((run: Run) => new Date(run.createdAt) > oneHourAgo);
  }
  
  return runs;
}

async function getJobsForRun(runId: number): Promise<Job[]> {
  const process = new Deno.Command("gh", {
    args: ["api", `-X`, "GET", `/repos/mrkurt/ssh2wss/actions/runs/${runId}/jobs`, "--jq", ".jobs[]"],
  });
  const { stdout } = await process.output();
  return JSON.parse(`[${new TextDecoder().decode(stdout).split("\n").filter(Boolean).join(",")}]`);
}

async function getAnnotationsForJob(jobId: number): Promise<string[]> {
  const process = new Deno.Command("gh", {
    args: ["api", `-X`, "GET", `/repos/mrkurt/ssh2wss/check-runs/${jobId}/annotations`, "--jq", ".[].message"],
  });
  const { stdout } = await process.output();
  const text = new TextDecoder().decode(stdout).trim();
  return text ? text.split("\n") : [];
}

// Command to dump all job logs for inspection:
// mkdir -p tmp && gh api repos/mrkurt/ssh2wss/actions/runs -q '.workflow_runs[].id' | while read run_id; do \
//   gh api "/repos/mrkurt/ssh2wss/actions/runs/$run_id/jobs" -q '.jobs[].id' | while read job_id; do \
//     gh api "/repos/mrkurt/ssh2wss/actions/jobs/$job_id/logs" > "tmp/action-logs-$job_id.txt" || true; \
//   done; \
// done

async function getJobLogs(jobId: number): Promise<string> {
  const process = new Deno.Command("gh", {
    args: ["api", `/repos/mrkurt/ssh2wss/actions/jobs/${jobId}/logs`],
    stderr: "piped",
  });
  const { stdout } = await process.output();
  const output = new TextDecoder().decode(stdout);
  
  // Split into groups and filter for ones that end with ##[error]
  const groups = output.split(/##\[group\]/g).slice(1); // slice(1) to skip first empty chunk
  const errorGroups = groups.filter(group => group.includes("##[error]"));
  
  // For each error group, keep everything up to ##[error] and strip timestamps
  const cleanedGroups = errorGroups.map(group => {
    const errorContent = group.split("##[error]")[0]; // Keep everything before ##[error]
    return errorContent
      .split("\n")
      .map(line => line.split(/\s+/).slice(1).join(" ")) // Remove timestamp
      .join("\n")
      .trim();
  });

  if (Deno.args.includes("--show-all-logs")) {
    return groups.join("\n\n");
  }

  return cleanedGroups.join("\n\n") || "No error logs found";
}

async function watchRun(run: Run): Promise<boolean> {
  const showAnnotations = Deno.args.includes("--show-annotations");
  
  // Use conclusion emoji for completed runs
  const emoji = run.status === "completed" && run.conclusion 
    ? STATUS_EMOJI[run.conclusion as keyof typeof STATUS_EMOJI] 
    : STATUS_EMOJI[run.status as keyof typeof STATUS_EMOJI];
  
  console.log(`${emoji} [${run.headBranch}] ${run.name} (#${run.databaseId})`);
  
  const jobs = await getJobsForRun(run.databaseId);
  for (const job of jobs) {
    // Use conclusion emoji for completed jobs
    const jobEmoji = job.status === "completed" && job.conclusion
      ? STATUS_EMOJI[job.conclusion as keyof typeof STATUS_EMOJI]
      : STATUS_EMOJI[job.status as keyof typeof STATUS_EMOJI];
      
    console.log(`  ${jobEmoji} ${job.name} (Job #${job.id})`);
    if (job.status === "completed") {
      if (showAnnotations) {
        const annotations = await getAnnotationsForJob(job.id);
        if (annotations.length > 0) {
          console.log("    Annotations:");
          for (const annotation of annotations) {
            console.log(`      - ${annotation}`);
          }
        }
      }
      
      // Show full logs for failed jobs
      if (job.conclusion === "failure") {
        console.log("\n    Full job logs:");
        const logs = await getJobLogs(job.id);
        console.log(logs.split("\n").map(line => `      ${line}`).join("\n"));
      }
    }
  }

  if (run.status === "completed") {
    const emoji = run.conclusion ? STATUS_EMOJI[run.conclusion as keyof typeof STATUS_EMOJI] : "‚ùì";
    console.log(`Run completed with conclusion: ${emoji} ${run.conclusion}`);
    return true;
  }
  return false;
}

async function waitForActiveRuns(): Promise<Run[]> {
  const startTime = Date.now();
  let lastUpdate = 0;
  let lastSeenRunId: number | null = null;

  while (true) {
    try {
      const runs = await getRuns(true);
      const activeRuns = runs.filter(run => {
        // Only show runs we haven't seen before
        if (lastSeenRunId === null) {
          lastSeenRunId = run.databaseId;
          return false;
        }
        return run.databaseId > lastSeenRunId;
      });
      
      if (activeRuns.length > 0) {
        lastSeenRunId = Math.max(...activeRuns.map(r => r.databaseId));
        return activeRuns;
      }

      // Update waiting message at most once per second
      const now = Date.now();
      if (now - lastUpdate >= 1000) {
        // Clear the previous line and write the new one
        Deno.stdout.writeSync(new TextEncoder().encode("\r\x1b[K"));
        const message = `‚è≥ Waiting for runs... (${formatElapsedTime(now - startTime)})`;
        Deno.stdout.writeSync(new TextEncoder().encode(message));
        lastUpdate = now;
      }

      await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
      console.error("\nError waiting for runs:", error.message);
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
}

async function listRecentRuns(): Promise<void> {
  const runs = await getRuns(false);
  if (runs.length === 0) {
    console.log("No recent runs found");
    return;
  }

  // Find most recent failed run
  const recentFailedRun = runs.find(run => run.conclusion === "failure");
  if (recentFailedRun) {
    console.log("Most recent failed run:");
    await watchRun(recentFailedRun);
    // Exit if this run is already completed and failed
    if (recentFailedRun.status === "completed" && recentFailedRun.conclusion === "failure") {
      console.log("Exiting due to failed run");
      Deno.exit(0);
    }
    console.log("\nNow watching for new runs...");
  } else {
    console.log("No failed runs found in recent history");
  }
}

async function actionLogsMain() {
  const watch = Deno.args.includes("--watch");

  try {
    if (watch) {
      // Show recent failed or in-progress runs from last hour
      const runs = await getRuns(false);
      const recentRuns = runs.filter(run => {
        const runTime = new Date(run.createdAt);
        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
        return runTime > oneHourAgo && (
          run.conclusion === "failure" || 
          run.status === "in_progress" ||
          run.status === "queued"
        );
      });

      if (recentRuns.length > 0) {
        console.log("Recent runs:");
        for (const run of recentRuns) {
          await watchRun(run);
          // Exit if this run is completed and failed
          if (run.status === "completed" && run.conclusion === "failure") {
            console.log("Exiting due to failed run");
            Deno.exit(0);
          }
        }
        console.log("\nNow watching for new runs...");
      }

      while (true) {
        const activeRuns = await waitForActiveRuns();
        if (activeRuns.length === 0) {
          // Clear the waiting line before exiting
          Deno.stdout.writeSync(new TextEncoder().encode("\r\x1b[K"));
          console.log("‚ú® No more active runs");
          return;
        }

        // Clear the waiting line before showing runs
        Deno.stdout.writeSync(new TextEncoder().encode("\r\x1b[K"));
        console.log(`Found ${activeRuns.length} active run(s):`);
        
        // Watch all active runs
        for (const run of activeRuns) {
          await watchRun(run);
          // Exit if this run failed
          if (run.status === "completed" && run.conclusion === "failure") {
            console.log("Exiting due to failed run");
            Deno.exit(0);
          }
        }

        // Wait a bit before checking again
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    } else {
      await listRecentRuns();
    }
  } catch (error) {
    console.error("Fatal error:", error.message);
    Deno.exit(1);
  }
}

if (import.meta.main) {
  actionLogsMain();
} 