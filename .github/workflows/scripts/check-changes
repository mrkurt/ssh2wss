#!/usr/bin/env -S deno run --allow-run --allow-write --allow-env --allow-net

interface FileChange {
  path: string;
  additions: number;
  deletions: number;
}

interface CommitInfo {
  hash: string;
  subject: string;
  date: string;
  author: string;
  body?: string;
  files?: FileChange[];
}

interface GitCommit {
  commit: string;
  subject: string;
  body: string;
  authorDate: string;
}

// Threshold for substantial changes (we can adjust this)
const CHANGE_THRESHOLD = 20; // Total lines changed (added + removed) per file

const startCommit = Deno.args[0]; // Optional starting commit

// Helper function to run commands and handle errors
async function runCommand(args: string[]): Promise<string> {
  const process = new Deno.Command("git", { 
    args: ["--no-pager", ...args], 
    stderr: "piped" 
  });
  const { stdout, stderr } = await process.output();
  const stderrText = new TextDecoder().decode(stderr);
  if (stderrText) {
    throw new Error(`Git command failed: ${stderrText.trim()}`);
  }
  return new TextDecoder().decode(stdout).trim();
}

async function getCommitHistory(since?: string): Promise<CommitInfo[]> {
  // Get basic commit info
  const rangeArg = since ? `${since}..HEAD` : "HEAD";
  const logCmd = new Deno.Command("git", {
    args: [
      "--no-pager", 
      "log", 
      rangeArg, 
      '--format={"hash":"%H","subject":"%s","date":"%aI","author":"%an"}'
    ],
  });
  const { stdout } = await logCmd.output();
  const commits = new TextDecoder().decode(stdout).trim().split("\n");
  
  // Add full message body and file changes to each commit
  const results: CommitInfo[] = [];
  for (const commit of commits) {
    const commitData = JSON.parse(commit) as CommitInfo;
    
    // Get full message body
    const bodyCmd = new Deno.Command("git", {
      args: ["--no-pager", "show", "--no-patch", "--format=%B", commitData.hash],
      stdout: "piped",
      stderr: "piped",
    });
    const { stdout: bodyOut } = await bodyCmd.output();
    const body = new TextDecoder().decode(bodyOut);
    commitData.body = body.trim().replace(/\\n/g, "\n");

    // Get file changes
    const filesCmd = new Deno.Command("git", {
      args: [
        "--no-pager",
        "show",
        "--format=",
        "--numstat",
        commitData.hash
      ],
      stdout: "piped",
      stderr: "piped",
    });
    const { stdout: filesOut } = await filesCmd.output();
    const fileChanges = new TextDecoder().decode(filesOut).trim().split("\n")
      .filter(line => line.trim())
      .map(line => {
        const [additions, deletions, path] = line.split("\t");
        return {
          path,
          additions: parseInt(additions) || 0,
          deletions: parseInt(deletions) || 0
        };
      });
    commitData.files = fileChanges;
    
    results.push(commitData);
  }
  
  return results;
}

function isSubstantialFile(file: string): boolean {
  // Ignore test files, docs, GitHub config, utility scripts
  if (
    file.endsWith("_test.go") ||
    file.endsWith(".md") ||
    file.startsWith(".github/") ||
    file.startsWith("scripts/") ||
    file === "go.sum" ||
    file.startsWith(".")
  ) {
    return false;
  }
  
  // Consider all other .go files substantial
  return file.endsWith(".go");
}

async function getChangedFiles(since: string): Promise<string[]> {
  const process = new Deno.Command("git", {
    args: ["diff", "--name-only", since],
  });
  const { stdout } = await process.output();
  return new TextDecoder().decode(stdout).trim().split("\n");
}

function formatDate(isoDate: string): string {
  try {
    const date = new Date(isoDate);
    if (isNaN(date.getTime())) {
      return "Unknown Date";
    }
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      hour12: true
    }).format(date);
  } catch {
    return "Unknown Date";
  }
}

async function isFirstRelease(): Promise<boolean> {
  const process = new Deno.Command("git", {
    args: ["tag", "-l"],
  });
  const { stdout } = await process.output();
  const tags = new TextDecoder().decode(stdout).trim();
  return !tags;
}

async function getCompareLink(): Promise<string> {
  // Use GitHub Actions env vars if available, fallback to git remote
  const serverUrl = Deno.env.get("GITHUB_SERVER_URL");
  const repository = Deno.env.get("GITHUB_REPOSITORY");
  
  let url: string;
  if (serverUrl && repository) {
    url = `${serverUrl}/${repository}`;
  } else {
    // Fallback to git remote parsing
    const process = new Deno.Command("git", {
      args: ["remote", "get-url", "origin"],
    });
    const { stdout } = await process.output();
    url = new TextDecoder().decode(stdout).trim()
      .replace(/\.git$/, '')  // Remove .git suffix if present
      .replace(/^git@github\.com:/, 'https://github.com/');  // Convert SSH to HTTPS URL
  }

  // For first release, compare against first commit
  if (await isFirstRelease()) {
    const firstCommit = new TextDecoder().decode(
      (await new Deno.Command("git", {
        args: ["rev-list", "--max-parents=0", "HEAD"],
      }).output()).stdout
    ).trim();
    return `${url}/compare/${firstCommit}...HEAD`;
  }

  // Otherwise compare against last tag
  const lastTag = new TextDecoder().decode(
    (await new Deno.Command("git", {
      args: ["describe", "--tags", "--abbrev=0"],
    }).output()).stdout
  ).trim();
  return `${url}/compare/${lastTag}...HEAD`;
}

async function generateReleaseNotes(commits: CommitInfo[]): Promise<string> {
  const isFirst = await isFirstRelease();
  const compareUrl = await getCompareLink();
  
  let notes = "";
  
  if (isFirst) {
    notes += [
      "ssh2wss: WebSocket to SSH bridge for proxied connections",
      "",
      "Implements a bridge that tunnels SSH connections through WebSocket proxies,",
      "allowing SSH access in environments where direct connections are blocked.",
      "",
      "ssh: core functionality",
      "- tunnels SSH traffic through WebSocket proxies",
      "- maintains end-to-end encryption",
      "- handles connection multiplexing",
      "",
      "auth: key-based authentication",
      "- uses standard OpenSSH key formats",
      "- supports multiple auth methods",
      "- handles key rotation",
      "",
      "pty: terminal handling",
      "- full pseudo-terminal support",
      "- window size management",
      "- ANSI/color support",
      "- interactive command execution",
      "",
      "client: OpenSSH compatibility",
      "- works with standard SSH clients",
      "- no client modifications needed",
      "- native SSH experience",
      "",
      "proxy: built-in support",
      "- automatic proxy detection",
      "- proxy auth handling",
      "- configurable settings",
      "",
      "Implementation uses Go's stdlib crypto/ssh package for SSH protocol handling,",
      "providing native support for SSH key formats and cryptographic operations.",
      "",
      "Architecture:",
      "1. SSH server - auth and terminal sessions",
      "2. WebSocket bridge - connection proxying",
      "3. Auth system - key management",
      "",
      "This release enables SSH access through WebSocket proxies in restricted networks.",
      ""
    ].join("\n");
  }

  notes += `\nFor a detailed list of changes, see: ${compareUrl.trim()}\n`;
  return notes;
}

async function getLastReleaseTag(): Promise<string> {
  const process = new Deno.Command("git", {
    args: ["rev-list", "--max-parents=0", "HEAD"],
    stderr: "null",
  });
  try {
    const { stdout } = await process.output();
    return new TextDecoder().decode(stdout).trim();
  } catch {
    throw new Error("Could not find first commit");
  }
}

// Format commit with emoji based on type
function getCommitEmoji(subject: string): string {
  if (subject.startsWith("feat:")) return "‚ú®";
  if (subject.startsWith("fix:")) return "üêõ";
  if (subject.startsWith("docs:")) return "üìö";
  if (subject.startsWith("chore:")) return "üîß";
  if (subject.startsWith("test:")) return "üß™";
  if (subject.startsWith("refactor:")) return "‚ôªÔ∏è";
  return "üî®";
}

async function getStartingCommit(): Promise<string> {
  try {
    // Try to get the most recent tag
    const process = new Deno.Command("git", {
      args: ["describe", "--tags", "--abbrev=0"],
      stderr: "null",
    });
    const { stdout } = await process.output();
    return new TextDecoder().decode(stdout).trim();
  } catch {
    // If no tags exist, get the first commit
    const process = new Deno.Command("git", {
      args: ["rev-list", "--max-parents=0", "HEAD"],
      stderr: "null",
    });
    const { stdout } = await process.output();
    return new TextDecoder().decode(stdout).trim();
  }
}

async function checkChangesMain() {
  // Get the starting commit - either from args or find it automatically
  const startCommit = Deno.args[0] || await getStartingCommit();
  const commits = await getCommitHistory(startCommit);
  
  // Aggregate changes across all commits
  const fileChanges = new Map<string, { additions: number; deletions: number }>();
  
  // Collect all changes by file
  for (const commit of commits) {
    for (const file of commit.files || []) {
      if (!isSubstantialFile(file.path)) continue;
      
      const current = fileChanges.get(file.path) || { additions: 0, deletions: 0 };
      fileChanges.set(file.path, {
        additions: current.additions + file.additions,
        deletions: current.deletions + file.deletions
      });
    }
  }

  // Filter for substantial changes
  const substantialFiles = Array.from(fileChanges.entries())
    .filter(([_, changes]) => changes.additions + changes.deletions >= CHANGE_THRESHOLD)
    .sort((a, b) => (b[1].additions + b[1].deletions) - (a[1].additions + a[1].deletions));

  const totalChanges = Array.from(fileChanges.values())
    .reduce((sum, changes) => sum + changes.additions + changes.deletions, 0);

  // Print analysis
  console.log("\n[Change Analysis]");
  console.log(`Checking since: ${startCommit}`);
  console.log(`Found ${fileChanges.size} changed files, ${substantialFiles.length} with substantial changes`);
  console.log(`Total lines changed across all files: ${totalChanges}`);

  if (substantialFiles.length > 0) {
    console.log("\n[Substantial Changes by File]");
    for (const [file, changes] of substantialFiles) {
      const total = changes.additions + changes.deletions;
      console.log(`\nüìù ${file}`);
      console.log(`   +${changes.additions}/-${changes.deletions} (${total} total lines)`);
    }
  } else {
    console.log("\nNo substantial changes found");
  }

  // Print statistics
  console.log("\n[Statistics]");
  console.log(`Total files analyzed: ${fileChanges.size}`);
  console.log(`Files with substantial changes: ${substantialFiles.length}`);
  console.log(`Total lines changed: ${totalChanges}`);

  // Show top 5 commits by total changes
  const commitsWithChanges = commits.map(commit => {
    const totalChanges = commit.files?.reduce((sum, file) => {
      if (!isSubstantialFile(file.path)) return sum;
      return sum + file.additions + file.deletions;
    }, 0) || 0;
    return { ...commit, totalChanges };
  })
  .filter(commit => commit.totalChanges > 0)
  .sort((a, b) => b.totalChanges - a.totalChanges)
  .slice(0, 5);

  if (commitsWithChanges.length > 0) {
    console.log("\n[Top Commits by Changes]");
    for (const commit of commitsWithChanges) {
      const emoji = getCommitEmoji(commit.subject);
      console.log(`\n${emoji} ${commit.subject} (+${commit.totalChanges} lines)`);
      if (commit.files) {
        const substantialFiles = commit.files
          .filter(f => isSubstantialFile(f.path))
          .sort((a, b) => (b.additions + b.deletions) - (a.additions + a.deletions))
          .slice(0, 3);  // Show top 3 files per commit
        for (const file of substantialFiles) {
          console.log(`   ‚Ä¢ ${file.path} (+${file.additions}/-${file.deletions})`);
        }
      }
    }
  }

  if (totalChanges > 1000) {
    console.log("\n‚ú® Changes exceed threshold - release recommended");
    
    // Only generate release notes if threshold exceeded and API key exists
    if (Deno.env.get("ANTHROPIC_API_KEY")) {
      console.log("\nü§ñ Generating release notes with Claude API...");
      const notes = await generateReleaseNotes(commits);
      await Deno.writeTextFile("release_notes.txt", notes);
    } else {
      console.error("\n‚ùå Error: ANTHROPIC_API_KEY not set but release notes are needed");
      Deno.exit(1);
    }
  }
}

if (import.meta.main) {
  checkChangesMain();
} 