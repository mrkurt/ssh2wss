# This workflow creates releases with a delay strategy to bundle multiple merges:
#
# 1. When commits are merged to main, this workflow starts but waits 30 minutes
# 2. After waiting, it checks if newer commits exist on main:
#    - If yes: skips this release (those commits will trigger their own workflow)
#    - If no: creates the release with all changes up to this point
#
# This strategy allows:
# - Multiple PRs to be merged within the 30 minute window
# - All changes to be bundled into a single release
# - Avoids creating many small releases when merging PRs close together
#
# The workflow will:
# 1. Wait 30 minutes (wait job)
# 2. Check for newer commits and create release if none exist (create job)
# 3. Build and upload binaries for all platforms in parallel (build-* jobs)

name: Release

on:
  workflow_call:  # Makes this workflow reusable
    inputs:
      release_notes:
        description: "Generated release notes from previous step"
        required: false
        type: string
      sha:
        description: "The SHA that triggered this workflow"
        required: true
        type: string
    outputs:
      upload_url:
        description: "Upload URL for the created release"
        value: ${{ jobs.create.outputs.upload_url }}
      version:
        description: "Version number for the release"
        value: ${{ jobs.create.outputs.version }}

permissions:
  contents: write  # Needed for creating releases and uploading assets

jobs:
  wait:
    runs-on: ubuntu-24.04  # Explicitly use the upcoming version
    outputs:
      skip: ${{ steps.check-release.outputs.skip }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to get the message

      - id: check-release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"[release]"* ]]; then
            echo "Commit message contains [release], skipping wait"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - id: wait
        if: steps.check-release.outputs.skip != 'true'
        run: |
          echo "Waiting 30 minutes before checking for release..."
          sleep 1800  # 30 minutes in seconds

  create:
    needs: wait
    runs-on: ubuntu-24.04  # Explicitly use the upcoming version
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags

      - id: check-latest
        run: |
          git fetch origin main
          LATEST_SHA=$(git rev-parse origin/main)
          if [ "${{ inputs.sha }}" != "$LATEST_SHA" ]; then
            echo "::notice::Newer commits exist on main, skipping release creation"
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          fi

      - id: get-version
        if: env.SKIP_RELEASE != 'true'
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          PATCH=$(echo $LAST_TAG | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="0.1.$NEW_PATCH"
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT

      - id: create-release
        if: env.SKIP_RELEASE != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: Release v${{ steps.get-version.outputs.version }}
          body: ${{ inputs.release_notes || 'No release notes provided' }}
          draft: false
          prerelease: true

  upload-assets:
    needs: create
    if: needs.create.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - id: download-linux
        uses: actions/download-artifact@v4
        with:
          name: flyssh-linux
          path: .

      - id: download-macos
        uses: actions/download-artifact@v4
        with:
          name: flyssh-macos
          path: .

      - id: download-windows
        uses: actions/download-artifact@v4
        with:
          name: flyssh-windows
          path: .

      - id: upload-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: ./flyssh-linux-amd64
          asset_name: flyssh-linux-amd64
          asset_content_type: application/octet-stream

      - id: upload-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: ./flyssh-darwin-amd64
          asset_name: flyssh-darwin-amd64
          asset_content_type: application/octet-stream

      - id: upload-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: ./flyssh.exe
          asset_name: flyssh-windows-amd64.exe
          asset_content_type: application/octet-stream 