name: Test Windows Client

on:
  workflow_call:  # Allow this workflow to be called by others

jobs:
  test-windows-client:
    name: Test Windows Client
    runs-on: windows-latest
    
    # Set up Linux container for our SSH server
    services:
      ssh-server:
        image: golang:1.21-bookworm
        ports:
          - 2222:2222
        options: >-
          --name ssh-server
          -v ${{ github.workspace }}:/app
          --workdir /app
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true
    
    - name: Set up Linux SSH Server
      shell: powershell
      run: |
        # Get container IP
        $containerIP = docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ssh-server
        echo "CONTAINER_IP=$containerIP" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Build and start our SSH server in the container
        docker exec ssh-server bash -c '
          # Build the server
          go build -o ssh2wss-server ./cmd/server &&
          # Generate test key
          ssh-keygen -t rsa -f test_key -N "" &&
          # Start our server
          ./ssh2wss-server -port 2222 -key test_key &
          # Wait for server to start
          sleep 5
        '
        
    - name: Install OpenSSH Client
      shell: powershell
      run: |
        # Check if OpenSSH Client is installed
        if (!(Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Client*').State -eq 'Installed') {
          # Install OpenSSH Client
          Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
        }
        # Verify installation
        ssh -V
        
    - name: Run Windows Client Tests
      env:
        SSH_SERVER_IP: ${{ env.CONTAINER_IP }}
      run: |
        # Run tests with Linux server container IP
        go test -v ./server -run "^TestWindowsClientToLinuxServer$" -args -server-ip=$env:SSH_SERVER_IP 